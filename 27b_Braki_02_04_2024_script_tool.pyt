# -*- coding: utf-8 -*-import arcpyimport osclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Braki by Daniel Buchar"        self.description = "Braki"        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # Utwórz parametr arcpy        param0 = arcpy.Parameter(            displayName="Geobaza",            name="Geobaza",            datatype="DEWorkspace",            parameterType="Required",            direction="Input"        )        param1 = arcpy.Parameter(            displayName="Shapefile DOM GSM",            name="DOM_GSM",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param2 = arcpy.Parameter(            displayName="Shapefile DOM UMTS900",            name="DOM_UMTS900",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param3 = arcpy.Parameter(            displayName="Shapefile DOM UMTS2100",            name="DOM_UMTS2100",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param4 = arcpy.Parameter(            displayName="Shapefile DOM_LTE800",            name="DOM_LTE800",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param5 = arcpy.Parameter(            displayName="Shapefile DOM LTE900",            name="DOM_LTE900",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param6 = arcpy.Parameter(            displayName="Shapefile DOM LTE1800",            name="DOM_LTE1800",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param7 = arcpy.Parameter(            displayName="Shapefile DOM LTE2100",            name="DOM_LTE2100",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param8 = arcpy.Parameter(            displayName="Shapefile DOM LTE2600",            name="DOM_LTE2600",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param9 = arcpy.Parameter(            displayName="Shapefile DOM 5G DSS",            name="DOM_5G_DSS",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param10 = arcpy.Parameter(            displayName="Shapefile DOM 5G C-BAND",            name="DOM_5G_C_BAND",            datatype="DEShapefile",            parameterType="Optional",            direction="Input"        )        param11 = arcpy.Parameter(            displayName="Table GSM cell (tabela z geobazy)",            name="GSM_cell",            datatype="DETable",            parameterType="Optional",            direction="Input"        )        param12 = arcpy.Parameter(            displayName="Table UMTS wcell (tabela z geobazy)",            name="UMTS_wcell",            datatype="DETable",            parameterType="Optional",            direction="Input"        )        param13 = arcpy.Parameter(            displayName="Table LTE lcell (tabela z geobazy)",            name="LTE_lcell",            datatype="DETable",            parameterType="Optional",            direction="Input"        )        param14 = arcpy.Parameter(            displayName="Table 5G gcell (tabela z geobazy)",            name="5G_gcell",            datatype="DETable",            parameterType="Optional",            direction="Input"        )        param15 = arcpy.Parameter(            displayName="Output Folder",            name="output_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input"        )        # Ustaw filtr plików na SHP        param1.filter.list = ['Shapefile (*.shp)']        param2.filter.list = ['Shapefile (*.shp)']        param3.filter.list = ['Shapefile (*.shp)']        param4.filter.list = ['Shapefile (*.shp)']        param5.filter.list = ['Shapefile (*.shp)']        param6.filter.list = ['Shapefile (*.shp)']        param7.filter.list = ['Shapefile (*.shp)']        param8.filter.list = ['Shapefile (*.shp)']        param9.filter.list = ['Shapefile (*.shp)']        param10.filter.list = ['Shapefile (*.shp)']        # Dodaj parametr do narzędzia procesującego#         param0.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\a.gdb'# #         param1.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_UMTS900_Eo202401.shp'#         param2.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_UMTS900_Eo202401.shp'#         param3.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_UMTS2100_Eo202401.shp'#         param4.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_LTE800_Eo202401.shp'#         param5.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_LTE900_Eo202401.shp'#         param6.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_LTE1800_Eo202401.shp'#         param7.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_LTE2100_Eo202401.shp'#         param8.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\OPL_DOM_LTE2600_Eo202401.shp'#         param9.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\DOM_CBAND3600_OPL_107dBm_20240201.shp'#         param10.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\DOM_CBAND3600_OPL_107dBm_20240201.shp'# #         param11.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_1_grudzien_2023\Dane_zasiegowe_nr_1.gdb\cell_20231231'#         param12.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_1_grudzien_2023\Dane_zasiegowe_nr_1.gdb\wcell_20231231'#         param13.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_1_grudzien_2023\Dane_zasiegowe_nr_1.gdb\lcell_20231231'#         param14.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_1_grudzien_2023\Dane_zasiegowe_nr_1.gdb\gcell_20231231'#         param15.value = r'D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane'        params = [param0, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14,param15]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        # Sprawdzenie zależności między parametrem 1 a 11        if parameters[1].valueAsText and not parameters[11].valueAsText:            parameters[1].setErrorMessage("Jeśli jest ustawiony parametr --GSM--, musi być również ustawiony parametr --cell.--")        elif parameters[11].valueAsText and not parameters[1].valueAsText:            parameters[11].setErrorMessage("Jeśli jest ustawiony parametr --cell--, ustaw przynajmniej jeden parametr --GSM.--")        # Sprawdzenie zależności między parametrami 2, 3 a 12        if (parameters[2].valueAsText or parameters[3].valueAsText) and not parameters[12].valueAsText:            parameters[2].setErrorMessage("Jeśli są ustawione parametry --DOM_UMTS900 lub DOM_UMTS2100--, musi być również ustawiony --wcell.--")            parameters[3].setErrorMessage("Jeśli są ustawione parametry --DOM_UMTS900 lub DOM_UMTS2100--, musi być również ustawiony --wcell.--")        elif parameters[12].valueAsText and not any(parameters[2].valueAsText or parameters[3].valueAsText):            parameters[12].setErrorMessage("Jeśli jest ustawiony parametr --wcell--, ustaw przynajmniej jeden parametr --DOM_UMTS900 i DOM_UMTS2100.--")        # Sprawdzenie zależności między parametrami 4, 5, 6, 7, 8 a 13        if any(parameters[i].valueAsText for i in range(4, 9)) and not parameters[13].valueAsText:            for i in range(4, 9):                parameters[i].setErrorMessage("Jeśli jest ustawiony którykolwiek z parametrów --DOM_LTE800 lub DOM_LTE900 lub DOM_LTE1800 lub DOM_LTE2100--, musi być również ustawiony parametr --lcell--.")        elif parameters[13].valueAsText and not any(parameters[i].valueAsText for i in range(4, 9)):            parameters[13].setErrorMessage("Jeśli jest ustawiony parametr --lcell--, ustaw przynajmniej jeden parametr --DOM_LTE800 i DOM_LTE900 i DOM_LTE1800 i DOM_LTE2100--.")        # Sprawdzenie zależności między parametrami 9, 10 a 14        if (parameters[9].valueAsText or parameters[10].valueAsText) and not parameters[14].valueAsText:            parameters[9].setErrorMessage("Jeśli są ustawione parametry --DOM_5G_DSS lub DOM_5G_C_BAND--, musi być również ustawiony parametr --gcell.--")            parameters[10].setErrorMessage("Jeśli są ustawione parametry --DOM_5G_DSS lub DOM_5G_C_BAND--, musi być również ustawiony parametr --gcell.--")        elif parameters[14].valueAsText and not (parameters[9].valueAsText and parameters[10].valueAsText):            parameters[14].setErrorMessage("Jeśli jest ustawiony parametr --gcell--, ustaw przynajmniej jeden parametr --DOM_5G_DSS i DOM_5G_C_BAND.--")        return    def execute(self, parameters, messages):        """The source code of the tool."""        shapefile_paths = {}        parameters1 = [parameters[1].valueAsText, parameters[2].valueAsText, parameters[3].valueAsText, parameters[4].valueAsText, parameters[5].valueAsText, parameters[6].valueAsText, parameters[7].valueAsText, parameters[8].valueAsText, parameters[9].valueAsText, parameters[10].valueAsText]  # załóżmy, że jest to lista z wartościami parametrów        # Lista kluczy odpowiadających parametrom        keys = ["GSM", "UMTS900", "UMTS2100", "LTE800", "LTE900", "LTE1800", "LTE2100", "LTE2600", "D5GDSS", "D5GCBAND"]        # Iteracja przez klucze i odpowiadające im wartości z listy parameters        for i, key in enumerate(keys):            value = parameters1[i]            if value:  # Sprawdzenie, czy wartość nie jest None lub pusta                shapefile_paths[key] = value        database_tables = {}        parameters2 = [parameters[11].valueAsText, parameters[12].valueAsText, parameters[13].valueAsText, parameters[14].valueAsText]        # Definiowanie kluczy i odpowiadających im indeksów w liście parameters2        keys_and_indices = {            "GSM": 0,            "UMTS900": 1,            "UMTS2100": 1,            "LTE800": 2,            "LTE900": 2,            "LTE1800": 2,            "LTE2100": 2,            "LTE2600": 2,            "D5GDSS": 3,            "D5GCBAND": 3        }        # Iteracja przez klucze i przypisywanie wartości z parameters2 do słownika        for key, index in keys_and_indices.items():            value = parameters2[index]  # Pobranie wartości z listy parameters2            if value:  # Sprawdzenie, czy wartość nie jest None lub pusta                database_tables[key] = value        # Definiowanie szablonu słownika field_names        # pola do zlaczneia        ########################################        ########################################        field_names_template = {            "GSM": "CELL_OBJ",            "UMTS900": "WCELL_OBJ",            "UMTS2100": "WCELL_OBJ",            "LTE800": "LCELL_OBJ",            "LTE900": "LCELL_OBJ",            "LTE1800": "LCELL_OBJ",            "LTE2100": "LCELL_OBJ",            "LTE2600": "LCELL_OBJ",            "D5GDSS": "LCELL_NAME",            "D5GCBAND": "GCELL_OBJ"        }        # Budowanie słownika field_names tylko z kluczami, które istnieją w database_tables        field_names = {key: field_names_template[key] for key in database_tables}        # Wyświetlenie wyników        for key, value in database_tables.items():            arcpy.AddMessage(f'key: {key}')            arcpy.AddMessage(f'Table: {value}')        for key, value in field_names.items():            arcpy.AddMessage(f'key: {key}')            arcpy.AddMessage(f'Field Name: {value}')        # Wyświetlenie wyników        for key, shapefile in shapefile_paths.items():            arcpy.AddMessage(f'key: {key}')            arcpy.AddMessage(f'shapefile: {shapefile}')        selected_layers = []        for key, shapefile in shapefile_paths.items():            arcpy.AddMessage(f'-------słownik shapefile_paths----------297')            arcpy.AddMessage(f'-----------------')            arcpy.AddMessage(f'Klucz: {key}')            arcpy.AddMessage(f'Wartosc: {shapefile}')            arcpy.AddMessage(f'-----------------')            arcpy.AddMessage(f'-----------------')            in_data = f"{shapefile}"            join_table = f"{database_tables[key]}"            field_name = f"{field_names[key]}"            if (key == "GSM" or                key == "UMTS900" or                key == "UMTS2100" or                key == "LTE800" or                key == "LTE900" or                key == "LTE1800" or                key == "LTE2100" or                key == "LTE2600"):                arcpy.management.AddField(in_data, "objj1", "LONG")                arcpy.management.CalculateField(in_data, "objj1", "!C_CELL_OBJ!", "PYTHON3")            elif (key == "D5GCBAND"):                arcpy.management.AddField(in_data, "objj1", "LONG")                arcpy.management.CalculateField(in_data, "objj1", "!C_XCELL_OB!", "PYTHON3")                #arcpy.management.CalculateField(lista_1[n], "objj1", '!TX_ID!', "PYTHON3")                # Przykład funkcji, która przetwarza wartość pola TX_ID#                 def remove_after_hash(value):#                     return value.split('#')[0] if '#' in value else value##                 # Załóżmy, że lista_1[n] to ścieżka do warstwy, a 'objj1' to nazwa pola docelowego#                 arcpy.management.CalculateField(#                     in_data,#                     "objj1",#                     "remove_after_hash(!TX_ID!)",#                     "PYTHON3",#                     code_block="""def remove_after_hash(value):#                     return value.split('#')[0] if '#' in value else value""")            elif (key == "D5GDSS"):                arcpy.management.AddField(in_data, "objj1", "TEXT")                #arcpy.management.CalculateField(lista_1[n], "objj1", '!TX_ID!', "PYTHON3")                # Przykład funkcji, która przetwarza wartość pola TX_ID                def remove_after_hash(value):                    return value.split('#')[0] if '#' in value else value                #przez to, ze dostajemy rozne dane to kolumny sie czasami roznia przewqaznie jest to TX_ID ale zdarzają się wyjątki                def get_column_name(table, possible_names):                    for name in possible_names:                        if name in [field.name for field in arcpy.ListFields(table)]:                            arcpy.AddMessage(f'pola - sprawdzanie czy jest TX_ID CZY Transmitte')                            arcpy.AddMessage(f'Tym razem masz dla warstwy shp C-BANDA lub DSS kolumne o nazwie: {name}')                            return name                    return None                possible_column_names = ["TX_ID", "Transmitte"]                # Załóżmy, że lista_1[n] to ścieżka do warstwy, a 'objj1' to nazwa pola docelowego                column_name = get_column_name(in_data, possible_column_names)                arcpy.management.CalculateField(                    in_data,                    "objj1",                    f"remove_after_hash(!{column_name}!)",                    "PYTHON3",                    code_block="""def remove_after_hash(value):                        return value.split('#')[0] if '#' in value else value"""                )            arcpy.AddMessage(f'-----------------')            arcpy.AddMessage(f'-----------------')            arcpy.AddMessage(f'-------Parametry do JoinField----------336')            arcpy.AddMessage(f'-----------------')            arcpy.AddMessage(f'in_data: {in_data}')            arcpy.AddMessage(f'in_field: objj1')            arcpy.AddMessage(f'join_table: {join_table}')            arcpy.AddMessage(f'field_name: {field_name}')            arcpy.AddMessage(f'-----------------')            arcpy.AddMessage(f'-----------------')            # Join Field            arcpy.management.JoinField(in_data=in_data, in_field="objj1", join_table=join_table, join_field=field_name, fields=[], fm_option="NOT_USE_FM", field_mapping="")            # Make Feature Layer            feature_layer = f"{key}_Layer"            arcpy.management.MakeFeatureLayer(in_data, feature_layer)#             # Select Layer By Attribute#             arcpy.management.SelectLayerByAttribute(#                 in_layer_or_view=feature_layer,#                 selection_type="NEW_SELECTION",#                 where_clause=f"{field_name} = 0"#             )            field_info = arcpy.ListFields(feature_layer, field_name)[0]            field_type = field_info.type            # Utwórz warunek zapytania na podstawie typu pola            if field_type == "Integer" or field_type == "Double" or field_type == "Single" or field_type == "Long":                where_clause = f"{field_name} = 0"            elif field_type == "String":                where_clause = f"{field_name} = ''"            else:                print("Nieobsługiwany typ pola.")            # Wykonaj wybór warstwy przez atrybut            arcpy.management.SelectLayerByAttribute(                in_layer_or_view=feature_layer,                selection_type="NEW_SELECTION",                where_clause=where_clause            )            selected_features = f"{parameters[0].valueAsText}//{key}_Selected"            arcpy.management.CopyFeatures(feature_layer, selected_features)#         # Ścieżka do folderu zawierającego pliki tekstowe#         arcpy.env.workspace = f"{parameters[0].valueAsText}"#         # Listuj klasy obiektów w bazie danych#         feature_classes = arcpy.ListFeatureClasses()##         # Proces przetwarzania klas obiektów#         technology_files = {}#         for feature_class in feature_classes:#             if feature_class.endswith("_Selected"):#                 technology = feature_class.split("_")[0]##                 if technology not in technology_files:#                     technology_files[technology] = []#                 technology_files[technology].append(feature_class)#                 arcpy.AddMessage(f'field_name123: {technology_files[technology]}')#         # Zapisywanie wartości objj1 do plików tekstowych#         for technology, feature_classes in technology_files.items():#             objj1_values = []#             for feature_class in feature_classes:#                 arcpy.AddMessage(f'field_name123a: {feature_class}')#                 # Przykład zapytania SQL, które wybiera odpowiednie rekordy#                 with arcpy.da.SearchCursor(feature_class, ["objj1"]) as cursor:#                     for row in cursor:#                         objj1_values.append(str(row[0]))#             output_filename = os.path.join(arcpy.env.workspace, fr"D:\ArcGIS\3_Dane_Zasiegowe_LTE_4G_UMTS_3G_GSM_2G\Dane_zasiegowe_nr_2_styczen_2024\Dane\paczka_opl_eo202401\\{technology}.txt")#             with open(output_filename, 'w') as output_file:#                 output_file.write(','.join(objj1_values))        # Ścieżka do folderu zawierającego pliki tekstowe        arcpy.env.workspace = parameters[0].valueAsText        # Listuj klasy obiektów w bazie danych        feature_classes = arcpy.ListFeatureClasses()        # Proces przetwarzania klas obiektów        technology_files = {}        aggregate_values = {'LTE': [], 'UMTS': [], 'D5G': [], 'GSM': []}        for feature_class in feature_classes:            if feature_class.endswith("_Selected"):                technology = feature_class.split("_")[0]                if technology not in technology_files:                    technology_files[technology] = []                technology_files[technology].append(feature_class)                arcpy.AddMessage(f'field_name123: {technology_files[technology]}')        # Zapisywanie wartości objj1 do plików tekstowych        for technology, feature_classes in technology_files.items():            objj1_values = []            for feature_class in feature_classes:                arcpy.AddMessage(f'field_name123a: {feature_class}')                # Przykład zapytania SQL, które wybiera odpowiednie rekordy                with arcpy.da.SearchCursor(feature_class, ["objj1"]) as cursor:                    for row in cursor:                        objj1_values.append(str(row[0]))                        # Dodaj wartości do odpowiedniego pliku agregującego                        if technology.startswith('LTE'):                            aggregate_values['LTE'].append(str(row[0]))                        elif technology.startswith('UMTS'):                            aggregate_values['UMTS'].append(str(row[0]))                        elif technology.startswith('D5G'):                            aggregate_values['D5G'].append(str(row[0]))                        elif technology.startswith('GSM'):                            aggregate_values['GSM'].append(str(row[0]))                            arcpy.AddMessage(f'field_name123ccc: {aggregate_values}')            output_filename = os.path.join(arcpy.env.workspace, fr"{parameters[15].valueAsText}\\{technology}.txt")            with open(output_filename, 'w') as output_file:                output_file.write(','.join(objj1_values))        # Zapisywanie wartości agregowanych do plików zbiorczych        for tech_group, values in aggregate_values.items():            output_filename = os.path.join(arcpy.env.workspace, fr"{parameters[15].valueAsText}\\All_{tech_group}.txt")            with open(output_filename, 'w') as output_file:                output_file.write(','.join(values))        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return