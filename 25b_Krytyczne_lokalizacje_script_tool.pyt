# -*- coding: utf-8 -*-import arcpyimport osclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the .pyt file)."""        self.label = "Toolbox Critical location"        self.alias = "DanielBuchar"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = None        param0 = arcpy.Parameter(            displayName="Input CSV Layer",            name="csv_layer",            datatype="DETable",            parameterType="Required",            direction="Input")        param1 = arcpy.Parameter(            displayName="Output Geodatabase",            name="output_gdb",            datatype="DEWorkspace",            parameterType="Required",            direction="Output")        param2 = arcpy.Parameter(            displayName="Output Table Name",            name="output_table_name",            datatype="GPString",            parameterType="Required",            direction="Output")        param2.value = "e1_loc_critical_Clear" # Default value        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal validation is performed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool parameter."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        arcpy.env.overwriteOutput = True        input_table = parameters[0].valueAsText        output_gdb = parameters[1].valueAsText        output_table_name = parameters[2].valueAsText        # Fields to extract        fields = [            "RISK_STATUS",            "REGION",            "PROJECT",            "LOC_OBJ",            "LOC_NAME_OPL",            "FINAL_REMARKS",            "DESC_INV",            "CEASE_DATE_PLAN",            "DISCONNECT_DATE",            "SOLUTION_DATE",            "BEST_SOLUTION_PLAN_DATE"        ]        # Verify that the input fields exist in the input table        field_names = [f.name for f in arcpy.ListFields(input_table)]        for field in fields:            if field not in field_names:                raise ValueError(f"Field {field} does not exist in the input table.")        # Create field mappings        field_mappings = arcpy.FieldMappings()        for field in fields:            field_map = arcpy.FieldMap()            field_map.addInputField(input_table, field)            field_mappings.addFieldMap(field_map)        # WHERE clause to filter records        where_clause = "RISK_STATUS IN ('BLACK', 'RED', 'YELLOW')"        # Use the TableToTable_conversion function to copy selected columns        arcpy.conversion.TableToTable(input_table, output_gdb, output_table_name, where_clause, field_mappings)        return