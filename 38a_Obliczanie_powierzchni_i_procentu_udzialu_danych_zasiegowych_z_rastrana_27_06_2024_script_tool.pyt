# -*- coding: utf-8 -*-import arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the .pyt file)."""        self.label = "Obliczenie procentowego udziału powierzchni"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Obliczanie procentowego udziału powierzchni danych zasięgowych by Daniel"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(            displayName="Warstwa z powierzchnią i maska jednocześnie",            name="plik_wejsciowy",            datatype="DEFeatureClass",            parameterType="Required",            direction="Input"        )        param1 = arcpy.Parameter(            displayName="Raster",            name="Raster",            datatype="GPRasterLayer",            parameterType="Required",            direction="Input"        )        param2 = arcpy.Parameter(            displayName="Wynik",            name="Wynik",            datatype="DEFeatureClass",            parameterType="Required",            direction="Output"        )        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Update parameter properties (this method is called whenever a parameter has been changed)."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool parameter."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        plik_wejsciowy = parameters[0].valueAsText        raster_warstwa = parameters[1].valueAsText        wynik_6 = parameters[2].valueAsText        # Dodanie pola powierzchni do warstwy wejściowej        arcpy.management.AddField(plik_wejsciowy, "Powierzchnia_dla_AOI", "DOUBLE")        # Obliczanie geometrii        arcpy.management.CalculateGeometryAttributes(            plik_wejsciowy,            [["Powierzchnia_dla_AOI", "AREA_GEODESIC"]],            area_unit="SQUARE_METERS"        )        # ExtractByMask        out_raster = arcpy.sa.ExtractByMask(raster_warstwa, plik_wejsciowy)        arcpy.AddMessage(f'Raster wejściowy dla ExtractByMask: {raster_warstwa}')        arcpy.AddMessage(f'Maska dla ExtractByMask: {plik_wejsciowy}')        raster_to_polygon_layer_4 = arcpy.conversion.RasterToPolygon(out_raster, "in_memory/RasterToPolygon_layer_4")        # Zapisanie wyniku        arcpy.management.Dissolve(raster_to_polygon_layer_4, wynik_6, dissolve_field=["gridcode"])        # Dodanie pola całkowitej powierzchni        arcpy.management.AddField(wynik_6, "Calkowita_powierzchnia_indoor_outdoor", "DOUBLE")        # Pobranie powierzchni z warstwy wejściowej        powierzchnia_value = None        with arcpy.da.SearchCursor(plik_wejsciowy, ["Powierzchnia_dla_AOI"]) as cursor:            for row in cursor:                powierzchnia_value = row[0]                arcpy.AddMessage(f'Powierzchnia AOI: {powierzchnia_value} m²')                break        # Aktualizacja pola całkowitej powierzchni w wyniku        with arcpy.da.UpdateCursor(wynik_6, ["Calkowita_powierzchnia_indoor_outdoor"]) as cursor:            for row in cursor:                row[0] = powierzchnia_value                arcpy.AddMessage(f'Powierzchnia całkowita: {powierzchnia_value} m²')                cursor.updateRow(row)        # Dodanie pola statystyki powierzchni        arcpy.management.AddField(wynik_6, "Statystyka_powierzchnia_indoor_outdoor", "DOUBLE")        # Aktualizacja pola statystyki powierzchni        with arcpy.da.UpdateCursor(wynik_6, ["Statystyka_powierzchnia_indoor_outdoor", "Calkowita_powierzchnia_indoor_outdoor", "Shape_Area"]) as cursor:            for row in cursor:                row[0] = (row[1] / row[2]) * 100                arcpy.AddMessage(f'Statystyka powierzchnia indoor/outdoor: {row[0]}%')                cursor.updateRow(row)        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and added to the display."""        return